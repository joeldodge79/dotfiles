" General settings
set nocompatible
set hlsearch

" Auto install vim-plug if not present
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins
call plug#begin()
Plug 'scrooloose/nerdtree'
" Plug 'pangloss/vim-javascript'

" cucu lsp
" Plug 'tpope/vim-cucumber'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'

" see https://github.com/davidhalter/jedi-vim/blob/master/autoload/jedi.vim s:default_settings
" for mappings
Plug 'davidhalter/jedi-vim'

Plug 'ervandew/supertab'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-fugitive'
Plug 'jpalardy/vim-slime'
Plug 'ludovicchabant/vim-gutentags'
Plug 'liuchengxu/vista.vim'
Plug 'itchyny/lightline.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'dense-analysis/ale'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-sensible'
Plug 'psf/black'
Plug 'vim-vdebug/vdebug'
call plug#end()


" cucu config
if executable('cucu')
  autocmd User lsp_setup call lsp#register_server({
    \ 'name': 'cucu',
    \ 'cmd': {server_info->['cucu', 'language-server']},
    \ 'whitelist': ['cucumber'],
  \ })
  autocmd FileType cucumber setlocal omnifunc=lsp#complete
endif

" vista.vim and lightline for cool status bar
" Ensure you have installed some decent font to show these pretty symbols,
" then you can enable icon for the kind.
let g:vista_fzf_preview = ['right:50%']
let g:vista#renderer#enable_icon = 1
map <Leader>v :Vista!! <CR>

let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'component_function': {
    \   'filename': 'LightlineFilename'
    \ },
    \ }

function! LightlineFilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction

" slime
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane":"{right-of}"}

" fzf
map <Leader>ft :Tags <CR>
map <Leader>ff :Files <CR>

" ALE
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['prettier', 'eslint'],
\   'python': ['black'],
\   'ruby': ['rubocop'],
\}
let g:ale_fix_on_save = 1
let g:ale_python_auto_pipenv = 1
nmap <silent> <leader>aj :ALENext<cr>
nmap <silent> <leader>ak :ALEPrevious<cr>

" NERDTreeIgnore
let NERDTreeIgnore=['^__pycache__$[[dir]]', '\~$']

" Vdebug
let g:vdebug_options_defaults = {
\    'port' : 9000,
\    'timeout' : 20,
\    'server' : '',
\    'on_close' : 'stop',
\    'break_on_open' : 0,
\    'ide_key' : '',
\    'debug_window_level' : 0,
\    'debug_file_level' : 0,
\    'debug_file' : 'vdbug.log',
\    'path_maps' : {},
\    'watch_window_style' : 'expanded',
\    'marker_default' : '⬦',
\    'marker_closed_tree' : '▸',
\    'marker_open_tree' : '▾',
\    'sign_breakpoint' : '▷',
\    'sign_current' : '▶',
\    'sign_disabled': '▌▌',
\    'continuous_mode'  : 1,
\    'background_listener' : 1,
\    'auto_start' : 1,
\    'simplified_status': 1,
\    'layout': 'vertical',
\}

map <Leader>p : vsp %:p:h <CR>
map <C-i>p :set paste <CR> i
map <C-i>n :set nopaste <CR> i

" Arrow keys to move between splits
map <Left> <C-W>h
map <Right> <C-W>l
map <Up> <C-W>k
map <Down> <C-W>j
map <C-i>p :set paste <CR> i
map <C-i>n :set nopaste <CR> i

" so long ruby files don't loose syntax highlighting
set redrawtime=10000
" ??
"vnoremap // y/<C-R>"<CR>
