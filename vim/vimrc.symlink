" General settings
set nocompatible
"set tabstop=8 softtabstop=0 expandtab shiftwidth=2 smarttab
set hlsearch

" Auto install vim-plug if not present
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins
call plug#begin()
Plug 'scrooloose/nerdtree'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
"Plug 'elzr/vim-json'

Plug 'carlitux/deoplete-ternjs'
" see https://github.com/davidhalter/jedi-vim/blob/master/autoload/jedi.vim s:default_settings
" for mappings
Plug 'davidhalter/jedi-vim'
"if has('nvim')
"  Plug 'deoplete-plugins/deoplete-jedi'
"  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"else
"  Plug 'Shougo/deoplete.nvim'
"  Plug 'roxma/nvim-yarp'
"  Plug 'roxma/vim-hug-neovim-rpc'
"endif

Plug 'ervandew/supertab'
"Plug 'wokalski/autocomplete-flow'
"Plug 'Shougo/neosnippet'
"Plug 'Shougo/neosnippet-snippets'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-fugitive'
Plug 'jpalardy/vim-slime'
Plug 'ludovicchabant/vim-gutentags'
Plug 'liuchengxu/vista.vim'
Plug 'itchyny/lightline.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'w0rp/ale'
Plug 'scrooloose/nerdcommenter'
Plug 'google/yapf', { 'rtp': 'plugins/vim', 'for': 'python' }
Plug 'tpope/vim-sensible'
call plug#end()

" Specific plugin configs
" vim-javascript
" code folding
"augroup javascript_folding
"  au!
"  au FileType javascript setlocal foldmethod=syntax
"augroup END

" Deoplete
let g:deoplete#enable_at_startup = 1
"let g:neosnippet#enable_completed_snippet = 1
" Use <tab> for deoplete autocompletion
"inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

" vista.vim and lightline for cool status bar
" Ensure you have installed some decent font to show these pretty symbols,
" then you can enable icon for the kind.
let g:vista_fzf_preview = ['right:50%']
let g:vista#renderer#enable_icon = 1
map <Leader>v :Vista!! <CR>

let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'component_function': {
    \   'filename': 'LightlineFilename'
    \ },
    \ }

function! LightlineFilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction

" slime
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane":"{right-of}"}

" fzf
map <Leader>ft :Tags <CR>
map <Leader>ff :Files <CR>

" ALE
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['prettier', 'eslint'],
\   'python': ['yapf'],
\}
let g:ale_fix_on_save = 1
let g:ale_python_auto_pipenv = 1
nmap <silent> <leader>aj :ALENext<cr>
nmap <silent> <leader>ak :ALEPrevious<cr>

map <Leader>p : vsp %:p:h <CR>
map <C-i>p :set paste <CR> i
map <C-i>n :set nopaste <CR> i

" Arrow keys to move between splits
map <Left> <C-W>h
map <Right> <C-W>l
map <Up> <C-W>k
map <Down> <C-W>j
map <C-i>p :set paste <CR> i
map <C-i>n :set nopaste <CR> i

" ??
"vnoremap // y/<C-R>"<CR>
